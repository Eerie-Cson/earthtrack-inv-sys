// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface User {
  id: string;
  username: string;
  password: string;
  role: string;
  email: string;
  firstname: string;
  lastname: string;
}

export interface Credentials {
  username: string;
  password: string;
}

export interface CreateUserRequest {
  username: string;
  password: string;
  email: string;
  firstname: string;
  lastname: string;
}

export interface UserResponse {
  data: User | undefined;
}

export interface BoolResponse {
  data: boolean;
}

export interface ValidateUserResponse {
  data: ValidateUserResponse_UserData | undefined;
}

export interface ValidateUserResponse_UserData {
  user: User | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: User): Observable<BoolResponse>;

  validateUser(request: Credentials): Observable<ValidateUserResponse>;
}

export interface UserServiceController {
  createUser(request: User): Promise<BoolResponse> | Observable<BoolResponse> | BoolResponse;

  validateUser(
    request: Credentials,
  ): Promise<ValidateUserResponse> | Observable<ValidateUserResponse> | ValidateUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "validateUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
